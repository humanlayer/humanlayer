openapi: 3.1.0
info:
  title: HumanLayer Daemon REST API
  version: 1.0.0
  description: |
    REST API for HumanLayer daemon operations, providing session management,
    approval workflows, and real-time event streaming capabilities.
  contact:
    name: HumanLayer Support
    url: https://humanlayer.dev
servers:
  - url: http://localhost:7777/api/v1
    description: Local daemon server

paths:
  /fuzzy-search/files:
    post:
      operationId: fuzzySearchFiles
      summary: Fuzzy search for files and folders
      description: |
        Performs fuzzy matching on file and folder paths within specified directories.
        Returns matches sorted by relevance with character-level highlighting information.

        Respects .gitignore by default. Search completes within 5 seconds or returns
        partial results with timeout error.
      tags:
        - Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FuzzySearchFilesRequest'
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FuzzySearchFilesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /health:
    get:
      operationId: getHealth
      summary: Health check
      description: Check if the daemon is running and healthy
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /debug-info:
    get:
      operationId: getDebugInfo
      summary: Get debug information
      description: Get debug information about the daemon including database stats and runtime configuration
      tags:
        - System
      responses:
        '200':
          description: Debug information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebugInfoResponse'

  /sessions:
    post:
      operationId: createSession
      summary: Launch a new session
      description: Create and start a new Claude Code session
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

    get:
      operationId: listSessions
      summary: List sessions
      description: |
        List all sessions with optional filtering. By default returns only leaf sessions
        (sessions with no children). Set leavesOnly=false to get all sessions.
      tags:
        - Sessions
      parameters:
        - name: leavesOnly
          in: query
          description: Return only leaf sessions (sessions with no children)
          schema:
            type: boolean
            default: true
        - name: filter
          in: query
          description: Filter sessions by type
          schema:
            type: string
            enum: [normal, archived, draft]
            description: |
              - normal: non-archived, non-draft sessions
              - archived: archived sessions only
              - draft: draft sessions only
              When omitted, returns ALL sessions (no filtering)
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsResponse'
        '500':
          $ref: '#/components/responses/InternalError'

  /sessions/{id}:
    get:
      operationId: getSession
      summary: Get session details
      description: Get detailed information about a specific session
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    patch:
      operationId: updateSession
      summary: Update session settings
      description: |
        Update session settings such as auto-accept mode or archived status.
        Only specified fields will be updated.
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/sessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSessionRequest'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '400':
          description: Invalid status transition or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /sessions/{id}/continue:
    post:
      operationId: continueSession
      summary: Continue or fork a session
      description: |
        Create a new session that continues from an existing session,
        inheriting its conversation history.
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/sessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContinueSessionRequest'
      responses:
        '201':
          description: New session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContinueSessionResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /sessions/{id}/launch:
    post:
      operationId: launchDraftSession
      summary: Launch a draft session
      description: Launch a draft session, transitioning it from draft to running state
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/sessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  description: Initial prompt to send to Claude
              required:
                - prompt
      responses:
        '200':
          description: Session launched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '400':
          description: Session is not in draft state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      operationId: deleteDraftSession
      summary: Delete a draft session
      description: Delete a draft session that has not been launched yet
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        '204':
          description: Draft session deleted successfully
        '400':
          description: Session is not in draft state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /sessions/{id}/hard-delete-empty:
    delete:
      operationId: hardDeleteEmptyDraftSession
      summary: Permanently delete an empty draft session
      description: |
        Permanently delete a draft or discarded session from the database if it is truly empty.
        A session is considered empty if it has no meaningful content (no title, no query, default model, no editor state).
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        '204':
          description: Empty draft session permanently deleted
        '400':
          description: Session is not empty or not a draft/discarded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /sessions/{id}/interrupt:
    post:
      operationId: interruptSession
      summary: Interrupt a running session
      description: |
        Send an interrupt signal to a running session, causing it to
        complete gracefully.
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        '200':
          description: Session interrupted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterruptSessionResponse'
        '400':
          description: Session not in running state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /sessions/{id}/messages:
    get:
      operationId: getSessionMessages
      summary: Get conversation messages
      description: |
        Retrieve the full conversation history for a session, including
        messages, tool calls, and tool results.
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        '200':
          description: Conversation messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /sessions/{id}/snapshots:
    get:
      operationId: getSessionSnapshots
      summary: Get file snapshots
      description: |
        Retrieve file snapshots captured during the session, showing
        the state of files at specific points in time.
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        '200':
          description: File snapshots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotsResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /sessions/archive:
    post:
      operationId: bulkArchiveSessions
      summary: Bulk archive/unarchive sessions
      description: Archive or unarchive multiple sessions in a single operation
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkArchiveRequest'
      responses:
        '200':
          description: Bulk operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkArchiveResponse'
        '207':
          description: Partial success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkArchiveResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /sessions/search:
    get:
      operationId: searchSessions
      summary: Search sessions by title
      description: |
        Search for sessions using SQL LIKE queries against the title field.
        Returns top sessions ordered by last_activity_at descending.
        Limited to 20 most recently modified sessions for performance.
      tags:
        - Sessions
      parameters:
        - name: query
          in: query
          required: false
          schema:
            type: string
            maxLength: 100
          description: Search query for title matching (uses SQL LIKE)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Maximum number of results to return
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionSearchResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /recent-paths:
    get:
      operationId: getRecentPaths
      summary: Get recent working directories
      description: Retrieve recently used working directories for quick access
      tags:
        - Sessions
      parameters:
        - name: limit
          in: query
          description: Maximum number of paths to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Recent paths
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecentPathsResponse'
        '500':
          $ref: '#/components/responses/InternalError'

  /slash-commands:
    get:
      operationId: getSlashCommands
      summary: Get available slash commands
      description: Retrieve slash commands available in the specified working directory
      tags:
        - Sessions
      parameters:
        - name: working_dir
          in: query
          required: true
          schema:
            type: string
          description: Working directory to search for commands
        - name: query
          in: query
          required: false
          schema:
            type: string
          description: Fuzzy search query
      responses:
        '200':
          description: List of slash commands
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlashCommandsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /agents/discover:
    post:
      summary: Discover available agents
      description: Discovers agent definitions from .claude/agents directories
      operationId: discoverAgents
      tags:
        - Agents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - workingDir
              properties:
                workingDir:
                  type: string
                  description: Session working directory for local agent discovery
      responses:
        '200':
          description: Successfully discovered agents
          content:
            application/json:
              schema:
                type: object
                required:
                  - agents
                properties:
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Agent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /config:
    get:
      operationId: getConfig
      summary: Get daemon configuration
      description: Retrieve current daemon configuration including Claude binary path
      tags:
        - Settings
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        '500':
          $ref: '#/components/responses/InternalError'
    patch:
      operationId: updateConfig
      summary: Update daemon configuration
      description: Update runtime daemon configuration such as Claude binary path
      tags:
        - Settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConfigRequest'
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /user-settings:
    get:
      operationId: getUserSettings
      summary: Get user settings
      description: Retrieve user preferences and settings
      tags:
        - Settings
      responses:
        '200':
          description: User settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsResponse'
        '500':
          $ref: '#/components/responses/InternalError'
    patch:
      operationId: updateUserSettings
      summary: Update user settings
      description: Update user preferences and settings
      tags:
        - Settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserSettingsRequest'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /anthropic_proxy/{session_id}/v1/messages:
    post:
      summary: Proxy Anthropic API requests for a session
      operationId: proxyAnthropicRequest
      x-manual: true
      tags:
        - proxy-manual
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
          description: Session ID for per-session routing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Proxied response from Anthropic
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
            text/event-stream:
              schema:
                type: string
                description: SSE stream for streaming responses
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /approvals:
    post:
      operationId: createApproval
      summary: Create approval request
      description: Create a new approval request for human review
      tags:
        - Approvals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApprovalRequest'
      responses:
        '201':
          description: Approval created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApprovalResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

    get:
      operationId: listApprovals
      summary: List approval requests
      description: List approval requests with optional session filtering
      tags:
        - Approvals
      parameters:
        - name: sessionId
          in: query
          description: Filter by session ID
          schema:
            type: string
      responses:
        '200':
          description: List of approvals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalsResponse'
        '500':
          $ref: '#/components/responses/InternalError'

  /approvals/{id}:
    get:
      operationId: getApproval
      summary: Get approval details
      description: Get detailed information about a specific approval request
      tags:
        - Approvals
      parameters:
        - $ref: '#/components/parameters/approvalId'
      responses:
        '200':
          description: Approval details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /approvals/{id}/decide:
    post:
      operationId: decideApproval
      summary: Decide on approval request
      description: Approve or deny an approval request
      tags:
        - Approvals
      parameters:
        - $ref: '#/components/parameters/approvalId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecideApprovalRequest'
      responses:
        '200':
          description: Decision recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecideApprovalResponse'
        '400':
          description: Invalid decision or approval already decided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /stream/events:
    get:
      operationId: streamEvents
      summary: Server-Sent Events stream
      description: |
        Subscribe to real-time events using Server-Sent Events (SSE).
        This endpoint streams events as they occur in the system.

        **Note**: This endpoint uses Server-Sent Events which is not natively
        supported by OpenAPI 3.1. Client code generation will not work for
        this endpoint. Manual SSE client implementation is required using:
        - JavaScript/TypeScript: Native EventSource API
        - Go: r3labs/sse or similar SSE client library
        - Other languages: Language-specific SSE client libraries
      tags:
        - sse-manual
      x-sse: true
      parameters:
        - name: eventTypes
          in: query
          description: Filter by event types
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EventType'
        - name: sessionId
          in: query
          description: Filter events by session ID
          schema:
            type: string
        - name: runId
          in: query
          description: Filter events by run ID
          schema:
            type: string
      responses:
        '200':
          description: SSE event stream
          content:
            text/event-stream:
              schema:
                type: string
                description: |
                  Server-Sent Events stream. Each event follows the format:
                  data: {"type": "event_type", "timestamp": "ISO8601", "data": {...}}

                  Keepalive messages are sent every 30 seconds:
                  : keepalive
              example: |
                data: {"type":"new_approval","timestamp":"2024-01-01T12:00:00Z","data":{"approval_id":"appr_123","session_id":"sess_456","tool_name":"execute_command"}}

                : keepalive

                data: {"type":"session_status_changed","timestamp":"2024-01-01T12:00:01Z","data":{"session_id":"sess_456","old_status":"running","new_status":"completed"}}

components:
  parameters:
    sessionId:
      name: id
      in: path
      required: true
      description: Session ID
      schema:
        type: string
      example: sess_abcdef123456

    approvalId:
      name: id
      in: path
      required: true
      description: Approval ID
      schema:
        type: string
      example: appr_xyz789

  schemas:
    # Fuzzy Search Schemas
    FuzzySearchFilesRequest:
      type: object
      required:
        - query
        - paths
      properties:
        query:
          type: string
          description: Fuzzy search pattern
          example: "handleFuzzy"
          minLength: 1
          maxLength: 256
        paths:
          type: array
          description: Directory paths to search within
          minItems: 1
          maxItems: 10
          items:
            type: string
            example: "/Users/dev/project"
        limit:
          type: integer
          description: Maximum number of results to return
          default: 20
          minimum: 1
          maximum: 1000
        filesOnly:
          type: boolean
          description: Return only files, exclude directories
          default: false
        respectGitignore:
          type: boolean
          description: Filter out files/folders matching .gitignore patterns
          default: true

    FuzzySearchFilesResponse:
      type: object
      required:
        - results
        - metadata
      properties:
        results:
          type: array
          description: Matched files/folders sorted by relevance
          items:
            $ref: '#/components/schemas/FileMatch'
        metadata:
          $ref: '#/components/schemas/SearchMetadata'

    FileMatch:
      type: object
      required:
        - path
        - displayPath
        - score
        - matchedIndexes
        - isDirectory
      properties:
        path:
          type: string
          description: Absolute path to matched file or folder
          example: "/Users/dev/project/src/handlers/fuzzySearch.go"
        displayPath:
          type: string
          description: Relative path for display (relative to first search path if applicable)
          example: "src/handlers/fuzzySearch.go"
        score:
          type: integer
          description: Match quality score (higher is better)
          example: 85
        matchedIndexes:
          type: array
          description: Character positions of matched query characters
          items:
            type: integer
          example: [23, 31, 36, 37, 38, 39]
        isDirectory:
          type: boolean
          description: True if this is a directory, false for files
          example: false

    SearchMetadata:
      type: object
      required:
        - totalScanned
        - totalMatches
        - durationMs
        - timedOut
      properties:
        totalScanned:
          type: integer
          description: Total number of files/folders scanned
          example: 15437
        totalMatches:
          type: integer
          description: Total matches found before applying limit
          example: 42
        durationMs:
          type: integer
          description: Search duration in milliseconds
          example: 156
        timedOut:
          type: boolean
          description: True if search was terminated due to timeout
          example: false

    # Health Response
    HealthResponse:
      type: object
      required:
        - status
        - version
      properties:
        status:
          type: string
          enum: [ok, degraded]
          example: ok
        version:
          type: string
          example: "0.1.0"
        dependencies:
          type: object
          properties:
            claude:
              type: object
              properties:
                available:
                  type: boolean
                  description: Whether Claude binary is available
                path:
                  type: string
                  nullable: true
                  description: Path to Claude binary if available
                version:
                  type: string
                  nullable: true
                  description: Claude binary version (e.g., "1.0.110")
                version_error:
                  type: string
                  nullable: true
                  description: Error message if version check failed
                error:
                  type: string
                  nullable: true
                  description: Error message if Claude is not available
              required:
                - available

    # Debug Info Response
    DebugInfoResponse:
      type: object
      required:
        - path
        - size
        - table_count
        - stats
        - cli_command
      properties:
        path:
          type: string
          description: Path to the SQLite database file
          example: "/home/user/.humanlayer/daemon.db"
        size:
          type: integer
          format: int64
          description: Size of the database file in bytes
          example: 1048576
        table_count:
          type: integer
          description: Number of tables in the database
          example: 5
        stats:
          type: object
          description: Database statistics
          additionalProperties:
            type: integer
            format: int64
          example:
            sessions: 42
            approvals: 15
            events: 237
        cli_command:
          type: string
          description: CLI command configured for MCP servers
          example: "hlyr"
        last_modified:
          type: string
          format: date-time
          description: Last modification time of the database file
          example: "2024-01-15T10:30:00Z"

    # Session Types
    Session:
      type: object
      required:
        - id
        - run_id
        - status
        - query
        - created_at
        - last_activity_at
      properties:
        id:
          type: string
          description: Unique session identifier
          example: sess_abcdef123456
        run_id:
          type: string
          description: Unique run identifier
          example: run_xyz789
        claude_session_id:
          type: string
          description: Claude's internal session ID
          example: claude_sess_123
        parent_session_id:
          type: string
          description: Parent session ID if this is a forked session
          example: sess_parent123
        status:
          $ref: '#/components/schemas/SessionStatus'
        query:
          type: string
          description: Initial query that started the session
          example: "Help me refactor this code"
        summary:
          type: string
          description: AI-generated summary of the session
          example: "Refactored authentication module"
        title:
          type: string
          description: User-editable session title
          example: "My Important Task"
        model:
          type: string
          description: Model used for this session
          example: sonnet
        model_id:
          type: string
          description: Full model identifier
          example: claude-opus-4-1-20250805
        working_dir:
          type: string
          description: Working directory for the session
          example: /home/user/project
        additional_directories:
          type: array
          items:
            type: string
          description: Additional directories Claude can access
          example: ["~/.humanlayer/logs", "/var/log/myapp"]
        created_at:
          type: string
          format: date-time
          description: Session creation timestamp
        last_activity_at:
          type: string
          format: date-time
          description: Last activity timestamp
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: Session completion timestamp
        error_message:
          type: string
          description: Error message if session failed
        cost_usd:
          type: number
          format: float
          nullable: true
          description: Total cost in USD
          example: 0.05
        input_tokens:
          type: integer
          nullable: true
          description: Number of input tokens
          example: 1000
        output_tokens:
          type: integer
          nullable: true
          description: Number of output tokens
          example: 500
        cache_creation_input_tokens:
          type: integer
          nullable: true
          description: Number of cache creation input tokens
          example: 100
        cache_read_input_tokens:
          type: integer
          nullable: true
          description: Number of cache read input tokens
          example: 50000
        effective_context_tokens:
          type: integer
          nullable: true
          description: Total tokens counting toward context window limit
          example: 51100
        context_limit:
          type: integer
          nullable: true
          description: Context window limit for the model
          example: 168000
        duration_ms:
          type: integer
          nullable: true
          description: Session duration in milliseconds
          example: 45000
        auto_accept_edits:
          type: boolean
          description: Whether edit tools are auto-accepted
          default: false
        dangerously_skip_permissions:
          type: boolean
          description: When true, all tool calls are automatically approved without user consent
          default: false
        dangerously_skip_permissions_expires_at:
          type: string
          format: date-time
          nullable: true
          description: ISO timestamp when dangerously skip permissions mode expires (optional)
        archived:
          type: boolean
          description: Whether session is archived
          default: false
        proxy_enabled:
          type: boolean
          description: Whether proxy is enabled for this session
          default: false
        proxy_base_url:
          type: string
          description: Base URL of the proxy server
          example: https://openrouter.ai/api/v1
        proxy_model_override:
          type: string
          description: Model to use with the proxy
          example: openai/gpt-oss-120b
        editor_state:
          type: string
          nullable: true
          description: JSON blob of editor state for draft sessions
          example: '{"content":"console.log(\"hello\");","cursorPosition":24}'

    SessionStatus:
      type: string
      enum:
        - draft
        - starting
        - running
        - completed
        - failed
        - interrupting
        - interrupted
        - waiting_input
        - discarded
      description: Current status of the session

    CreateSessionRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Initial query for Claude
          example: "Help me write a Python script to process CSV files"
        title:
          type: string
          description: Optional title for the session
          example: "CSV Processing Script"
        model:
          type: string
          enum: [opus, sonnet, haiku]
          description: Model to use for the session
        mcp_config:
          $ref: '#/components/schemas/MCPConfig'
        permission_prompt_tool:
          type: string
          description: MCP tool for permission prompts
        working_dir:
          type: string
          description: Working directory for the session
          example: /home/user/project
        max_turns:
          type: integer
          minimum: 1
          description: Maximum conversation turns
          example: 10
        system_prompt:
          type: string
          description: Override system prompt
        append_system_prompt:
          type: string
          description: Text to append to system prompt
        allowed_tools:
          type: array
          items:
            type: string
          description: Whitelist of allowed tools
          example: ["read_file", "write_file"]
        disallowed_tools:
          type: array
          items:
            type: string
          description: Blacklist of disallowed tools
          example: ["execute_command"]
        additional_directories:
          type: array
          items:
            type: string
          description: Additional directories Claude can access
          example: ["~/.humanlayer/logs", "/var/log/myapp"]
        custom_instructions:
          type: string
          description: Custom instructions for Claude
        auto_accept_edits:
          type: boolean
          description: Enable auto-accept for edit tools
          default: false
        dangerously_skip_permissions:
          type: boolean
          description: Launch session with dangerously skip permissions enabled
          default: false
        dangerously_skip_permissions_timeout:
          type: integer
          format: int64
          nullable: true
          description: Optional default timeout in milliseconds for dangerously skip permissions
          default: 900000  # 15 minutes default, but nullable
        verbose:
          type: boolean
          description: Enable verbose output
          default: false
        # Proxy configuration for OpenRouter support
        proxy_enabled:
          type: boolean
          description: Enable proxy routing for this session
          default: false
        proxy_base_url:
          type: string
          description: Base URL for proxy service
          example: "https://openrouter.ai/api/v1"
        proxy_model_override:
          type: string
          description: Model identifier for proxy routing
          example: "openai/gpt-4"
        proxy_api_key:
          type: string
          description: API key for proxy authentication
        draft:
          type: boolean
          description: Create session in draft state without launching Claude
          default: false

    CreateSessionResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - session_id
            - run_id
          properties:
            session_id:
              type: string
              description: Created session ID
              example: sess_new123
            run_id:
              type: string
              description: Created run ID
              example: run_new456

    SessionResponse:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/Session'

    SessionsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Session'
        counts:
          type: object
          description: Session counts by category
          properties:
            normal:
              type: integer
              description: Number of normal (non-archived, non-draft) sessions
            archived:
              type: integer
              description: Number of archived sessions
            draft:
              type: integer
              description: Number of draft sessions

    SessionSearchResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Session"

    UpdateSessionRequest:
      type: object
      properties:
        auto_accept_edits:
          type: boolean
          description: Enable/disable auto-accept for edit tools
        dangerously_skip_permissions:
          type: boolean
          description: Enable or disable dangerously skip permissions mode
        dangerously_skip_permissions_timeout_ms:
          type: integer
          format: int64
          nullable: true
          description: Optional timeout in milliseconds for dangerously skip permissions mode
        archived:
          type: boolean
          description: Archive/unarchive the session
        title:
          type: string
          description: Update session title
          example: "Updated Task Name"
        # New fields for model configuration
        model:
          type: string
          description: Model to use (opus, sonnet, or empty for default)
          example: "sonnet"
        model_id:
          type: string
          description: Full model identifier
          example: "claude-3-5-sonnet-20241022"
        # New fields for proxy configuration
        proxy_enabled:
          type: boolean
          description: Enable proxy routing for this session
          example: true
        proxy_base_url:
          type: string
          description: Base URL for proxy service
          example: "https://openrouter.ai/api/v1"
        proxy_model_override:
          type: string
          description: Model identifier for proxy routing
          example: "anthropic/claude-3.5-sonnet"
        proxy_api_key:
          type: string
          description: API key for proxy authentication
          example: "sk-or-..."
        additional_directories:
          type: array
          items:
            type: string
          description: Update additional directories Claude can access
          example: ["~/.humanlayer/logs", "/var/log/myapp"]
        working_dir:
          type: string
          description: Update the working directory for the session
          example: "/Users/john/projects/myapp"
        editor_state:
          type: string
          description: JSON blob of editor state for draft sessions
          example: '{"content":"console.log(\"hello\");","cursorPosition":24}'
        status:
          $ref: '#/components/schemas/SessionStatus'
          description: Update session status (only draft ↔ discarded transitions allowed)

    ContinueSessionRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: New query to continue with
          example: "Now add error handling to the script"
        system_prompt:
          type: string
          description: Override system prompt
        append_system_prompt:
          type: string
          description: Append to system prompt
        mcp_config:
          $ref: '#/components/schemas/MCPConfig'
        permission_prompt_tool:
          type: string
          description: MCP tool for permissions
        allowed_tools:
          type: array
          items:
            type: string
          description: Allowed tools list
        disallowed_tools:
          type: array
          items:
            type: string
          description: Disallowed tools list
        custom_instructions:
          type: string
          description: Custom instructions
        max_turns:
          type: integer
          minimum: 1
          description: Max conversation turns

    ContinueSessionResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - session_id
            - run_id
            - claude_session_id
            - parent_session_id
          properties:
            session_id:
              type: string
              example: sess_child123
            run_id:
              type: string
              example: run_child456
            claude_session_id:
              type: string
              example: claude_sess_child
            parent_session_id:
              type: string
              example: sess_parent123

    InterruptSessionResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - success
            - session_id
            - status
          properties:
            success:
              type: boolean
              example: true
            session_id:
              type: string
              example: sess_abc123
            status:
              type: string
              enum: [interrupting]
              example: interrupting

    # Conversation Types
    ConversationEvent:
      type: object
      required:
        - id
        - session_id
        - sequence
        - event_type
        - created_at
      properties:
        id:
          type: integer
          format: int64
          example: 1234
        session_id:
          type: string
          example: sess_abc123
        claude_session_id:
          type: string
          example: claude_sess_123
        sequence:
          type: integer
          description: Sequence number in conversation
          example: 5
        event_type:
          type: string
          enum: [message, tool_call, tool_result, system, thinking]
          description: Type of conversation event
        created_at:
          type: string
          format: date-time
        role:
          type: string
          enum: [user, assistant, system]
          description: Message role (for message events)
        content:
          type: string
          description: Message content
        tool_id:
          type: string
          description: Tool invocation ID (for tool events)
        tool_name:
          type: string
          description: Tool name (for tool_call events)
        tool_input_json:
          type: string
          description: JSON string of tool input (for tool_call events)
        parent_tool_use_id:
          type: string
          description: Parent tool use ID for nested calls
        tool_result_for_id:
          type: string
          description: Tool call ID this result is for
        tool_result_content:
          type: string
          description: Tool result content
        is_completed:
          type: boolean
          description: Whether tool call has received result
          default: false
        approval_status:
          type: string
          enum: [pending, approved, denied, resolved]
          nullable: true
          description: Approval status for tool calls
        approval_id:
          type: string
          nullable: true
          description: Associated approval ID

    ConversationResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ConversationEvent'

    # Snapshot Types
    FileSnapshot:
      type: object
      required:
        - tool_id
        - file_path
        - content
        - created_at
      properties:
        tool_id:
          type: string
          description: Tool invocation that created snapshot
          example: tool_use_123
        file_path:
          type: string
          description: Path to the file
          example: /home/user/project/main.py
        content:
          type: string
          description: File content at snapshot time
        created_at:
          type: string
          format: date-time

    SnapshotsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FileSnapshot'

    # Bulk Operations
    BulkArchiveRequest:
      type: object
      required:
        - session_ids
        - archived
      properties:
        session_ids:
          type: array
          items:
            type: string
          minItems: 1
          description: Sessions to archive/unarchive
          example: ["sess_123", "sess_456"]
        archived:
          type: boolean
          description: True to archive, false to unarchive

    BulkArchiveResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - success
          properties:
            success:
              type: boolean
              example: true
            failed_sessions:
              type: array
              items:
                type: string
              description: Sessions that failed to update
              example: ["sess_789"]

    # Path Types
    RecentPath:
      type: object
      required:
        - path
        - last_used
        - usage_count
      properties:
        path:
          type: string
          description: Directory path
          example: /home/user/projects/myapp
        last_used:
          type: string
          format: date-time
          description: Last time this path was used
        usage_count:
          type: integer
          description: Number of times used
          example: 15

    RecentPathsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RecentPath'

    # Slash Command Types
    SlashCommand:
      type: object
      required:
        - name
        - source
      properties:
        name:
          type: string
          example: "/create_plan"
          description: Command name including slash prefix
        source:
          type: string
          enum: ["local", "global"]
          description: Source of the command - local (repo) or global (user home)
          example: "local"

    SlashCommandsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SlashCommand'

    # Agent Types
    Agent:
      type: object
      required:
        - name
        - mentionText
        - source
      properties:
        name:
          type: string
          description: Agent name from YAML frontmatter
          example: "codebase-locator"
        mentionText:
          type: string
          description: Text to use for mentions
          example: "@agent-codebase-locator"
        source:
          type: string
          enum: [local, global]
          description: Whether agent is from local or global directory
        description:
          type: string
          description: Optional description from YAML frontmatter

    UpdateConfigRequest:
      type: object
      properties:
        claude_path:
          type: string
          nullable: true
          description: Path to Claude binary (empty string for auto-detection)
          example: "/usr/local/bin/claude"

    ConfigResponse:
      type: object
      required:
        - claude_path
        - claude_available
      properties:
        claude_path:
          type: string
          description: Currently configured Claude path
        claude_detected_path:
          type: string
          description: Automatically detected Claude path (may differ from configured)
        claude_available:
          type: boolean
          description: Whether Claude is available at the configured path

    UserSettings:
      type: object
      required:
        - advanced_providers
        - created_at
        - updated_at
      properties:
        advanced_providers:
          type: boolean
          description: Enable advanced provider options like OpenRouter
        opt_in_telemetry:
          type: boolean
          description: Opt-in for performance and error reporting
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserSettingsResponse:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/UserSettings'

    UpdateUserSettingsRequest:
      type: object
      properties:
        advanced_providers:
          type: boolean
          description: Enable or disable advanced provider options
        opt_in_telemetry:
          type: boolean
          description: Opt-in or opt-out of performance and error reporting

    # Approval Types
    Approval:
      type: object
      required:
        - id
        - run_id
        - session_id
        - status
        - created_at
        - tool_name
        - tool_input
      properties:
        id:
          type: string
          description: Unique approval identifier
          example: appr_abc123
        run_id:
          type: string
          description: Associated run ID
          example: run_xyz789
        session_id:
          type: string
          description: Associated session ID
          example: sess_def456
        status:
          $ref: '#/components/schemas/ApprovalStatus'
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        responded_at:
          type: string
          format: date-time
          nullable: true
          description: Response timestamp
        tool_name:
          type: string
          description: Tool requesting approval
          example: execute_command
        tool_input:
          type: object
          description: Tool input parameters
          additionalProperties: true
          example:
            command: "rm -rf /tmp/test"
        comment:
          type: string
          description: Approver's comment
          example: "Approved with caution"

    ApprovalStatus:
      type: string
      enum:
        - pending
        - approved
        - denied
      description: Current status of the approval

    CreateApprovalRequest:
      type: object
      required:
        - run_id
        - tool_name
        - tool_input
      properties:
        run_id:
          type: string
          description: Run ID for the approval
          example: run_xyz789
        tool_name:
          type: string
          description: Name of the tool requesting approval
          example: execute_command
        tool_input:
          type: object
          description: Tool input parameters
          additionalProperties: true

    CreateApprovalResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - approval_id
          properties:
            approval_id:
              type: string
              description: Created approval ID
              example: appr_new123

    ApprovalResponse:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/Approval'

    ApprovalsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Approval'

    DecideApprovalRequest:
      type: object
      required:
        - decision
      properties:
        decision:
          type: string
          enum: [approve, deny]
          description: Approval decision
        comment:
          type: string
          description: Optional comment (required for deny)
          example: "Looks safe to proceed"

    DecideApprovalResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - success
          properties:
            success:
              type: boolean
              example: true
            error:
              type: string
              description: Error message if failed

    # MCP Types
    MCPConfig:
      type: object
      properties:
        mcpServers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MCPServer'
          description: Map of server name to configuration
          example:
            filesystem:
              command: mcp-server-filesystem
              args: ["--read-only"]

    MCPServer:
      type: object
      properties:
        type:
          type: string
          description: Server type (http for HTTP servers, omit for stdio)
          example: http
        command:
          type: string
          description: Command to execute (for stdio servers)
          example: mcp-server-filesystem
        args:
          type: array
          items:
            type: string
          description: Command arguments (for stdio servers)
          example: ["--read-only", "/home/user"]
        env:
          type: object
          additionalProperties:
            type: string
          description: Environment variables (for stdio servers)
          example:
            DEBUG: "true"
        url:
          type: string
          description: HTTP endpoint URL (for HTTP servers)
          example: http://localhost:7777/api/v1/mcp
        headers:
          type: object
          additionalProperties:
            type: string
          description: HTTP headers to include (for HTTP servers)
          example:
            X-Session-ID: "session-123"

    # Event Types
    EventType:
      type: string
      enum:
        - new_approval
        - approval_resolved
        - session_status_changed
        - conversation_updated
        - session_settings_changed
      description: Type of system event

    Event:
      type: object
      required:
        - type
        - timestamp
        - data
      properties:
        type:
          $ref: '#/components/schemas/EventType'
        timestamp:
          type: string
          format: date-time
          description: Event timestamp
        data:
          type: object
          additionalProperties: true
          description: Event-specific data

    # Error Types
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/ErrorDetail'

    ErrorDetail:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code (e.g., HLD-101)
          example: HLD-102
        message:
          type: string
          description: Human-readable error message
          example: Session not found
        details:
          type: object
          additionalProperties: true
          description: Additional error context

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: HLD-301
              message: Missing required field 'query'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: HLD-102
              message: Session not found

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: HLD-401
              message: Internal server error
              details:
                trace_id: "abc123"

tags:
  - name: System
    description: System health and status endpoints
  - name: Sessions
    description: Session lifecycle management
  - name: Approvals
    description: Human-in-the-loop approval workflows
  - name: Events
    description: Real-time event streaming
  - name: Proxy
    description: Model proxy endpoints for alternative providers
  - name: Files
    description: File system search and navigation
  - name: Agents
    description: Agent discovery and management
