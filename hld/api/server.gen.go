// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for ApprovalStatus.
const (
	ApprovalStatusApproved ApprovalStatus = "approved"
	ApprovalStatusDenied   ApprovalStatus = "denied"
	ApprovalStatusPending  ApprovalStatus = "pending"
)

// Defines values for ConversationEventApprovalStatus.
const (
	ConversationEventApprovalStatusApproved ConversationEventApprovalStatus = "approved"
	ConversationEventApprovalStatusDenied   ConversationEventApprovalStatus = "denied"
	ConversationEventApprovalStatusPending  ConversationEventApprovalStatus = "pending"
	ConversationEventApprovalStatusResolved ConversationEventApprovalStatus = "resolved"
)

// Defines values for ConversationEventEventType.
const (
	ConversationEventEventTypeMessage    ConversationEventEventType = "message"
	ConversationEventEventTypeSystem     ConversationEventEventType = "system"
	ConversationEventEventTypeThinking   ConversationEventEventType = "thinking"
	ConversationEventEventTypeToolCall   ConversationEventEventType = "tool_call"
	ConversationEventEventTypeToolResult ConversationEventEventType = "tool_result"
)

// Defines values for ConversationEventRole.
const (
	ConversationEventRoleAssistant ConversationEventRole = "assistant"
	ConversationEventRoleSystem    ConversationEventRole = "system"
	ConversationEventRoleUser      ConversationEventRole = "user"
)

// Defines values for CreateSessionRequestModel.
const (
	Opus   CreateSessionRequestModel = "opus"
	Sonnet CreateSessionRequestModel = "sonnet"
)

// Defines values for DecideApprovalRequestDecision.
const (
	Approve DecideApprovalRequestDecision = "approve"
	Deny    DecideApprovalRequestDecision = "deny"
)

// Defines values for EventType.
const (
	ApprovalResolved       EventType = "approval_resolved"
	ConversationUpdated    EventType = "conversation_updated"
	NewApproval            EventType = "new_approval"
	SessionSettingsChanged EventType = "session_settings_changed"
	SessionStatusChanged   EventType = "session_status_changed"
)

// Defines values for HealthResponseStatus.
const (
	Degraded HealthResponseStatus = "degraded"
	Ok       HealthResponseStatus = "ok"
)

// Defines values for InterruptSessionResponseDataStatus.
const (
	InterruptSessionResponseDataStatusInterrupting InterruptSessionResponseDataStatus = "interrupting"
)

// Defines values for SessionStatus.
const (
	SessionStatusCompleted    SessionStatus = "completed"
	SessionStatusDiscarded    SessionStatus = "discarded"
	SessionStatusDraft        SessionStatus = "draft"
	SessionStatusFailed       SessionStatus = "failed"
	SessionStatusInterrupted  SessionStatus = "interrupted"
	SessionStatusInterrupting SessionStatus = "interrupting"
	SessionStatusRunning      SessionStatus = "running"
	SessionStatusStarting     SessionStatus = "starting"
	SessionStatusWaitingInput SessionStatus = "waiting_input"
)

// Defines values for SlashCommandSource.
const (
	Global SlashCommandSource = "global"
	Local  SlashCommandSource = "local"
)

// Defines values for ListSessionsParamsFilter.
const (
	Archived ListSessionsParamsFilter = "archived"
	Draft    ListSessionsParamsFilter = "draft"
	Normal   ListSessionsParamsFilter = "normal"
)

// Approval defines model for Approval.
type Approval struct {
	// Comment Approver's comment
	Comment *string `json:"comment,omitempty"`

	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Id Unique approval identifier
	Id string `json:"id"`

	// RespondedAt Response timestamp
	RespondedAt *time.Time `json:"responded_at"`

	// RunId Associated run ID
	RunId string `json:"run_id"`

	// SessionId Associated session ID
	SessionId string `json:"session_id"`

	// Status Current status of the approval
	Status ApprovalStatus `json:"status"`

	// ToolInput Tool input parameters
	ToolInput map[string]interface{} `json:"tool_input"`

	// ToolName Tool requesting approval
	ToolName string `json:"tool_name"`
}

// ApprovalResponse defines model for ApprovalResponse.
type ApprovalResponse struct {
	Data Approval `json:"data"`
}

// ApprovalStatus Current status of the approval
type ApprovalStatus string

// ApprovalsResponse defines model for ApprovalsResponse.
type ApprovalsResponse struct {
	Data []Approval `json:"data"`
}

// BulkArchiveRequest defines model for BulkArchiveRequest.
type BulkArchiveRequest struct {
	// Archived True to archive, false to unarchive
	Archived bool `json:"archived"`

	// SessionIds Sessions to archive/unarchive
	SessionIds []string `json:"session_ids"`
}

// BulkArchiveResponse defines model for BulkArchiveResponse.
type BulkArchiveResponse struct {
	Data struct {
		// FailedSessions Sessions that failed to update
		FailedSessions *[]string `json:"failed_sessions,omitempty"`
		Success        bool      `json:"success"`
	} `json:"data"`
}

// ConfigResponse defines model for ConfigResponse.
type ConfigResponse struct {
	// ClaudeAvailable Whether Claude is available at the configured path
	ClaudeAvailable bool `json:"claude_available"`

	// ClaudeDetectedPath Automatically detected Claude path (may differ from configured)
	ClaudeDetectedPath *string `json:"claude_detected_path,omitempty"`

	// ClaudePath Currently configured Claude path
	ClaudePath string `json:"claude_path"`
}

// ContinueSessionRequest defines model for ContinueSessionRequest.
type ContinueSessionRequest struct {
	// AllowedTools Allowed tools list
	AllowedTools *[]string `json:"allowed_tools,omitempty"`

	// AppendSystemPrompt Append to system prompt
	AppendSystemPrompt *string `json:"append_system_prompt,omitempty"`

	// CustomInstructions Custom instructions
	CustomInstructions *string `json:"custom_instructions,omitempty"`

	// DisallowedTools Disallowed tools list
	DisallowedTools *[]string `json:"disallowed_tools,omitempty"`

	// MaxTurns Max conversation turns
	MaxTurns  *int       `json:"max_turns,omitempty"`
	McpConfig *MCPConfig `json:"mcp_config,omitempty"`

	// PermissionPromptTool MCP tool for permissions
	PermissionPromptTool *string `json:"permission_prompt_tool,omitempty"`

	// Query New query to continue with
	Query string `json:"query"`

	// SystemPrompt Override system prompt
	SystemPrompt *string `json:"system_prompt,omitempty"`
}

// ContinueSessionResponse defines model for ContinueSessionResponse.
type ContinueSessionResponse struct {
	Data struct {
		ClaudeSessionId string `json:"claude_session_id"`
		ParentSessionId string `json:"parent_session_id"`
		RunId           string `json:"run_id"`
		SessionId       string `json:"session_id"`
	} `json:"data"`
}

// ConversationEvent defines model for ConversationEvent.
type ConversationEvent struct {
	// ApprovalId Associated approval ID
	ApprovalId *string `json:"approval_id"`

	// ApprovalStatus Approval status for tool calls
	ApprovalStatus  *ConversationEventApprovalStatus `json:"approval_status"`
	ClaudeSessionId *string                          `json:"claude_session_id,omitempty"`

	// Content Message content
	Content   *string   `json:"content,omitempty"`
	CreatedAt time.Time `json:"created_at"`

	// EventType Type of conversation event
	EventType ConversationEventEventType `json:"event_type"`
	Id        int64                      `json:"id"`

	// IsCompleted Whether tool call has received result
	IsCompleted *bool `json:"is_completed,omitempty"`

	// ParentToolUseId Parent tool use ID for nested calls
	ParentToolUseId *string `json:"parent_tool_use_id,omitempty"`

	// Role Message role (for message events)
	Role *ConversationEventRole `json:"role,omitempty"`

	// Sequence Sequence number in conversation
	Sequence  int    `json:"sequence"`
	SessionId string `json:"session_id"`

	// ToolId Tool invocation ID (for tool events)
	ToolId *string `json:"tool_id,omitempty"`

	// ToolInputJson JSON string of tool input (for tool_call events)
	ToolInputJson *string `json:"tool_input_json,omitempty"`

	// ToolName Tool name (for tool_call events)
	ToolName *string `json:"tool_name,omitempty"`

	// ToolResultContent Tool result content
	ToolResultContent *string `json:"tool_result_content,omitempty"`

	// ToolResultForId Tool call ID this result is for
	ToolResultForId *string `json:"tool_result_for_id,omitempty"`
}

// ConversationEventApprovalStatus Approval status for tool calls
type ConversationEventApprovalStatus string

// ConversationEventEventType Type of conversation event
type ConversationEventEventType string

// ConversationEventRole Message role (for message events)
type ConversationEventRole string

// ConversationResponse defines model for ConversationResponse.
type ConversationResponse struct {
	Data []ConversationEvent `json:"data"`
}

// CreateApprovalRequest defines model for CreateApprovalRequest.
type CreateApprovalRequest struct {
	// RunId Run ID for the approval
	RunId string `json:"run_id"`

	// ToolInput Tool input parameters
	ToolInput map[string]interface{} `json:"tool_input"`

	// ToolName Name of the tool requesting approval
	ToolName string `json:"tool_name"`
}

// CreateApprovalResponse defines model for CreateApprovalResponse.
type CreateApprovalResponse struct {
	Data struct {
		// ApprovalId Created approval ID
		ApprovalId string `json:"approval_id"`
	} `json:"data"`
}

// CreateSessionRequest defines model for CreateSessionRequest.
type CreateSessionRequest struct {
	// AdditionalDirectories Additional directories Claude can access
	AdditionalDirectories *[]string `json:"additional_directories,omitempty"`

	// AllowedTools Whitelist of allowed tools
	AllowedTools *[]string `json:"allowed_tools,omitempty"`

	// AppendSystemPrompt Text to append to system prompt
	AppendSystemPrompt *string `json:"append_system_prompt,omitempty"`

	// AutoAcceptEdits Enable auto-accept for edit tools
	AutoAcceptEdits *bool `json:"auto_accept_edits,omitempty"`

	// CustomInstructions Custom instructions for Claude
	CustomInstructions *string `json:"custom_instructions,omitempty"`

	// DangerouslySkipPermissions Launch session with dangerously skip permissions enabled
	DangerouslySkipPermissions *bool `json:"dangerously_skip_permissions,omitempty"`

	// DangerouslySkipPermissionsTimeout Optional default timeout in milliseconds for dangerously skip permissions
	DangerouslySkipPermissionsTimeout *int64 `json:"dangerously_skip_permissions_timeout"`

	// DisallowedTools Blacklist of disallowed tools
	DisallowedTools *[]string `json:"disallowed_tools,omitempty"`

	// Draft Create session in draft state without launching Claude
	Draft *bool `json:"draft,omitempty"`

	// MaxTurns Maximum conversation turns
	MaxTurns  *int       `json:"max_turns,omitempty"`
	McpConfig *MCPConfig `json:"mcp_config,omitempty"`

	// Model Model to use for the session
	Model *CreateSessionRequestModel `json:"model,omitempty"`

	// PermissionPromptTool MCP tool for permission prompts
	PermissionPromptTool *string `json:"permission_prompt_tool,omitempty"`

	// ProxyApiKey API key for proxy authentication
	ProxyApiKey *string `json:"proxy_api_key,omitempty"`

	// ProxyBaseUrl Base URL for proxy service
	ProxyBaseUrl *string `json:"proxy_base_url,omitempty"`

	// ProxyEnabled Enable proxy routing for this session
	ProxyEnabled *bool `json:"proxy_enabled,omitempty"`

	// ProxyModelOverride Model identifier for proxy routing
	ProxyModelOverride *string `json:"proxy_model_override,omitempty"`

	// Query Initial query for Claude
	Query string `json:"query"`

	// SystemPrompt Override system prompt
	SystemPrompt *string `json:"system_prompt,omitempty"`

	// Title Optional title for the session
	Title *string `json:"title,omitempty"`

	// Verbose Enable verbose output
	Verbose *bool `json:"verbose,omitempty"`

	// WorkingDir Working directory for the session
	WorkingDir *string `json:"working_dir,omitempty"`
}

// CreateSessionRequestModel Model to use for the session
type CreateSessionRequestModel string

// CreateSessionResponse defines model for CreateSessionResponse.
type CreateSessionResponse struct {
	Data struct {
		// RunId Created run ID
		RunId string `json:"run_id"`

		// SessionId Created session ID
		SessionId string `json:"session_id"`
	} `json:"data"`
}

// DebugInfoResponse defines model for DebugInfoResponse.
type DebugInfoResponse struct {
	// CliCommand CLI command configured for MCP servers
	CliCommand string `json:"cli_command"`

	// LastModified Last modification time of the database file
	LastModified *time.Time `json:"last_modified,omitempty"`

	// Path Path to the SQLite database file
	Path string `json:"path"`

	// Size Size of the database file in bytes
	Size int64 `json:"size"`

	// Stats Database statistics
	Stats map[string]int64 `json:"stats"`

	// TableCount Number of tables in the database
	TableCount int `json:"table_count"`
}

// DecideApprovalRequest defines model for DecideApprovalRequest.
type DecideApprovalRequest struct {
	// Comment Optional comment (required for deny)
	Comment *string `json:"comment,omitempty"`

	// Decision Approval decision
	Decision DecideApprovalRequestDecision `json:"decision"`
}

// DecideApprovalRequestDecision Approval decision
type DecideApprovalRequestDecision string

// DecideApprovalResponse defines model for DecideApprovalResponse.
type DecideApprovalResponse struct {
	Data struct {
		// Error Error message if failed
		Error   *string `json:"error,omitempty"`
		Success bool    `json:"success"`
	} `json:"data"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Code Error code (e.g., HLD-101)
	Code string `json:"code"`

	// Details Additional error context
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error ErrorDetail `json:"error"`
}

// Event defines model for Event.
type Event struct {
	// Data Event-specific data
	Data map[string]interface{} `json:"data"`

	// Timestamp Event timestamp
	Timestamp time.Time `json:"timestamp"`

	// Type Type of system event
	Type EventType `json:"type"`
}

// EventType Type of system event
type EventType string

// FileSnapshot defines model for FileSnapshot.
type FileSnapshot struct {
	// Content File content at snapshot time
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`

	// FilePath Path to the file
	FilePath string `json:"file_path"`

	// ToolId Tool invocation that created snapshot
	ToolId string `json:"tool_id"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Dependencies *struct {
		Claude *struct {
			// Available Whether Claude binary is available
			Available bool `json:"available"`

			// Error Error message if Claude is not available
			Error *string `json:"error"`

			// Path Path to Claude binary if available
			Path *string `json:"path"`

			// Version Claude binary version (e.g., "1.0.110")
			Version *string `json:"version"`

			// VersionError Error message if version check failed
			VersionError *string `json:"version_error"`
		} `json:"claude,omitempty"`
	} `json:"dependencies,omitempty"`
	Status  HealthResponseStatus `json:"status"`
	Version string               `json:"version"`
}

// HealthResponseStatus defines model for HealthResponse.Status.
type HealthResponseStatus string

// InterruptSessionResponse defines model for InterruptSessionResponse.
type InterruptSessionResponse struct {
	Data struct {
		SessionId string                             `json:"session_id"`
		Status    InterruptSessionResponseDataStatus `json:"status"`
		Success   bool                               `json:"success"`
	} `json:"data"`
}

// InterruptSessionResponseDataStatus defines model for InterruptSessionResponse.Data.Status.
type InterruptSessionResponseDataStatus string

// MCPConfig defines model for MCPConfig.
type MCPConfig struct {
	// McpServers Map of server name to configuration
	McpServers *map[string]MCPServer `json:"mcpServers,omitempty"`
}

// MCPServer defines model for MCPServer.
type MCPServer struct {
	// Args Command arguments (for stdio servers)
	Args *[]string `json:"args,omitempty"`

	// Command Command to execute (for stdio servers)
	Command *string `json:"command,omitempty"`

	// Env Environment variables (for stdio servers)
	Env *map[string]string `json:"env,omitempty"`

	// Headers HTTP headers to include (for HTTP servers)
	Headers *map[string]string `json:"headers,omitempty"`

	// Type Server type (http for HTTP servers, omit for stdio)
	Type *string `json:"type,omitempty"`

	// Url HTTP endpoint URL (for HTTP servers)
	Url *string `json:"url,omitempty"`
}

// RecentPath defines model for RecentPath.
type RecentPath struct {
	// LastUsed Last time this path was used
	LastUsed time.Time `json:"last_used"`

	// Path Directory path
	Path string `json:"path"`

	// UsageCount Number of times used
	UsageCount int `json:"usage_count"`
}

// RecentPathsResponse defines model for RecentPathsResponse.
type RecentPathsResponse struct {
	Data []RecentPath `json:"data"`
}

// Session defines model for Session.
type Session struct {
	// AdditionalDirectories Additional directories Claude can access
	AdditionalDirectories *[]string `json:"additional_directories,omitempty"`

	// Archived Whether session is archived
	Archived *bool `json:"archived,omitempty"`

	// AutoAcceptEdits Whether edit tools are auto-accepted
	AutoAcceptEdits *bool `json:"auto_accept_edits,omitempty"`

	// CacheCreationInputTokens Number of cache creation input tokens
	CacheCreationInputTokens *int `json:"cache_creation_input_tokens"`

	// CacheReadInputTokens Number of cache read input tokens
	CacheReadInputTokens *int `json:"cache_read_input_tokens"`

	// ClaudeSessionId Claude's internal session ID
	ClaudeSessionId *string `json:"claude_session_id,omitempty"`

	// CompletedAt Session completion timestamp
	CompletedAt *time.Time `json:"completed_at"`

	// ContextLimit Context window limit for the model
	ContextLimit *int `json:"context_limit"`

	// CostUsd Total cost in USD
	CostUsd *float32 `json:"cost_usd"`

	// CreatedAt Session creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// DangerouslySkipPermissions When true, all tool calls are automatically approved without user consent
	DangerouslySkipPermissions *bool `json:"dangerously_skip_permissions,omitempty"`

	// DangerouslySkipPermissionsExpiresAt ISO timestamp when dangerously skip permissions mode expires (optional)
	DangerouslySkipPermissionsExpiresAt *time.Time `json:"dangerously_skip_permissions_expires_at"`

	// DurationMs Session duration in milliseconds
	DurationMs *int `json:"duration_ms"`

	// EditorState JSON blob of editor state for draft sessions
	EditorState *string `json:"editor_state"`

	// EffectiveContextTokens Total tokens counting toward context window limit
	EffectiveContextTokens *int `json:"effective_context_tokens"`

	// ErrorMessage Error message if session failed
	ErrorMessage *string `json:"error_message,omitempty"`

	// Id Unique session identifier
	Id string `json:"id"`

	// InputTokens Number of input tokens
	InputTokens *int `json:"input_tokens"`

	// LastActivityAt Last activity timestamp
	LastActivityAt time.Time `json:"last_activity_at"`

	// Model Model used for this session
	Model *string `json:"model,omitempty"`

	// ModelId Full model identifier
	ModelId *string `json:"model_id,omitempty"`

	// OutputTokens Number of output tokens
	OutputTokens *int `json:"output_tokens"`

	// ParentSessionId Parent session ID if this is a forked session
	ParentSessionId *string `json:"parent_session_id,omitempty"`

	// ProxyBaseUrl Base URL of the proxy server
	ProxyBaseUrl *string `json:"proxy_base_url,omitempty"`

	// ProxyEnabled Whether proxy is enabled for this session
	ProxyEnabled *bool `json:"proxy_enabled,omitempty"`

	// ProxyModelOverride Model to use with the proxy
	ProxyModelOverride *string `json:"proxy_model_override,omitempty"`

	// Query Initial query that started the session
	Query string `json:"query"`

	// RunId Unique run identifier
	RunId string `json:"run_id"`

	// Status Current status of the session
	Status SessionStatus `json:"status"`

	// Summary AI-generated summary of the session
	Summary *string `json:"summary,omitempty"`

	// Title User-editable session title
	Title *string `json:"title,omitempty"`

	// WorkingDir Working directory for the session
	WorkingDir *string `json:"working_dir,omitempty"`
}

// SessionResponse defines model for SessionResponse.
type SessionResponse struct {
	Data Session `json:"data"`
}

// SessionStatus Current status of the session
type SessionStatus string

// SessionsResponse defines model for SessionsResponse.
type SessionsResponse struct {
	// Counts Session counts by category
	Counts *struct {
		// Archived Number of archived sessions
		Archived *int `json:"archived,omitempty"`

		// Draft Number of draft sessions
		Draft *int `json:"draft,omitempty"`

		// Normal Number of normal (non-archived, non-draft) sessions
		Normal *int `json:"normal,omitempty"`
	} `json:"counts,omitempty"`
	Data []Session `json:"data"`
}

// SlashCommand defines model for SlashCommand.
type SlashCommand struct {
	// Name Command name including slash prefix
	Name string `json:"name"`

	// Source Source of the command - local (repo) or global (user home)
	Source SlashCommandSource `json:"source"`
}

// SlashCommandSource Source of the command - local (repo) or global (user home)
type SlashCommandSource string

// SlashCommandsResponse defines model for SlashCommandsResponse.
type SlashCommandsResponse struct {
	Data []SlashCommand `json:"data"`
}

// SnapshotsResponse defines model for SnapshotsResponse.
type SnapshotsResponse struct {
	Data []FileSnapshot `json:"data"`
}

// UpdateConfigRequest defines model for UpdateConfigRequest.
type UpdateConfigRequest struct {
	// ClaudePath Path to Claude binary (empty string for auto-detection)
	ClaudePath *string `json:"claude_path"`
}

// UpdateSessionRequest defines model for UpdateSessionRequest.
type UpdateSessionRequest struct {
	// AdditionalDirectories Update additional directories Claude can access
	AdditionalDirectories *[]string `json:"additional_directories,omitempty"`

	// Archived Archive/unarchive the session
	Archived *bool `json:"archived,omitempty"`

	// AutoAcceptEdits Enable/disable auto-accept for edit tools
	AutoAcceptEdits *bool `json:"auto_accept_edits,omitempty"`

	// DangerouslySkipPermissions Enable or disable dangerously skip permissions mode
	DangerouslySkipPermissions *bool `json:"dangerously_skip_permissions,omitempty"`

	// DangerouslySkipPermissionsTimeoutMs Optional timeout in milliseconds for dangerously skip permissions mode
	DangerouslySkipPermissionsTimeoutMs *int64 `json:"dangerously_skip_permissions_timeout_ms"`

	// EditorState JSON blob of editor state for draft sessions
	EditorState *string `json:"editor_state,omitempty"`

	// Model Model to use (opus, sonnet, or empty for default)
	Model *string `json:"model,omitempty"`

	// ModelId Full model identifier
	ModelId *string `json:"model_id,omitempty"`

	// ProxyApiKey API key for proxy authentication
	ProxyApiKey *string `json:"proxy_api_key,omitempty"`

	// ProxyBaseUrl Base URL for proxy service
	ProxyBaseUrl *string `json:"proxy_base_url,omitempty"`

	// ProxyEnabled Enable proxy routing for this session
	ProxyEnabled *bool `json:"proxy_enabled,omitempty"`

	// ProxyModelOverride Model identifier for proxy routing
	ProxyModelOverride *string `json:"proxy_model_override,omitempty"`

	// Title Update session title
	Title *string `json:"title,omitempty"`

	// WorkingDir Update the working directory for the session
	WorkingDir *string `json:"working_dir,omitempty"`
}

// UpdateUserSettingsRequest defines model for UpdateUserSettingsRequest.
type UpdateUserSettingsRequest struct {
	// AdvancedProviders Enable or disable advanced provider options
	AdvancedProviders *bool `json:"advanced_providers,omitempty"`

	// OptInTelemetry Opt-in or opt-out of performance and error reporting
	OptInTelemetry *bool `json:"opt_in_telemetry,omitempty"`
}

// UserSettings defines model for UserSettings.
type UserSettings struct {
	// AdvancedProviders Enable advanced provider options like OpenRouter
	AdvancedProviders bool      `json:"advanced_providers"`
	CreatedAt         time.Time `json:"created_at"`

	// OptInTelemetry Opt-in for performance and error reporting
	OptInTelemetry *bool     `json:"opt_in_telemetry,omitempty"`
	UpdatedAt      time.Time `json:"updated_at"`
}

// UserSettingsResponse defines model for UserSettingsResponse.
type UserSettingsResponse struct {
	Data UserSettings `json:"data"`
}

// ApprovalId defines model for approvalId.
type ApprovalId = string

// SessionId defines model for sessionId.
type SessionId = string

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// InternalError defines model for InternalError.
type InternalError = ErrorResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// ListApprovalsParams defines parameters for ListApprovals.
type ListApprovalsParams struct {
	// SessionId Filter by session ID
	SessionId *string `form:"sessionId,omitempty" json:"sessionId,omitempty"`
}

// GetRecentPathsParams defines parameters for GetRecentPaths.
type GetRecentPathsParams struct {
	// Limit Maximum number of paths to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListSessionsParams defines parameters for ListSessions.
type ListSessionsParams struct {
	// LeavesOnly Return only leaf sessions (sessions with no children)
	LeavesOnly *bool `form:"leavesOnly,omitempty" json:"leavesOnly,omitempty"`

	// Filter Filter sessions by type
	Filter *ListSessionsParamsFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// ListSessionsParamsFilter defines parameters for ListSessions.
type ListSessionsParamsFilter string

// LaunchDraftSessionJSONBody defines parameters for LaunchDraftSession.
type LaunchDraftSessionJSONBody struct {
	// Prompt Initial prompt to send to Claude
	Prompt string `json:"prompt"`
}

// GetSlashCommandsParams defines parameters for GetSlashCommands.
type GetSlashCommandsParams struct {
	// SessionId Session ID to get working directory
	SessionId string `form:"session_id" json:"session_id"`

	// Query Fuzzy search query
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// CreateApprovalJSONRequestBody defines body for CreateApproval for application/json ContentType.
type CreateApprovalJSONRequestBody = CreateApprovalRequest

// DecideApprovalJSONRequestBody defines body for DecideApproval for application/json ContentType.
type DecideApprovalJSONRequestBody = DecideApprovalRequest

// UpdateConfigJSONRequestBody defines body for UpdateConfig for application/json ContentType.
type UpdateConfigJSONRequestBody = UpdateConfigRequest

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody = CreateSessionRequest

// BulkArchiveSessionsJSONRequestBody defines body for BulkArchiveSessions for application/json ContentType.
type BulkArchiveSessionsJSONRequestBody = BulkArchiveRequest

// UpdateSessionJSONRequestBody defines body for UpdateSession for application/json ContentType.
type UpdateSessionJSONRequestBody = UpdateSessionRequest

// ContinueSessionJSONRequestBody defines body for ContinueSession for application/json ContentType.
type ContinueSessionJSONRequestBody = ContinueSessionRequest

// LaunchDraftSessionJSONRequestBody defines body for LaunchDraftSession for application/json ContentType.
type LaunchDraftSessionJSONRequestBody LaunchDraftSessionJSONBody

// UpdateUserSettingsJSONRequestBody defines body for UpdateUserSettings for application/json ContentType.
type UpdateUserSettingsJSONRequestBody = UpdateUserSettingsRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List approval requests
	// (GET /approvals)
	ListApprovals(c *gin.Context, params ListApprovalsParams)
	// Create approval request
	// (POST /approvals)
	CreateApproval(c *gin.Context)
	// Get approval details
	// (GET /approvals/{id})
	GetApproval(c *gin.Context, id ApprovalId)
	// Decide on approval request
	// (POST /approvals/{id}/decide)
	DecideApproval(c *gin.Context, id ApprovalId)
	// Get daemon configuration
	// (GET /config)
	GetConfig(c *gin.Context)
	// Update daemon configuration
	// (PATCH /config)
	UpdateConfig(c *gin.Context)
	// Get debug information
	// (GET /debug-info)
	GetDebugInfo(c *gin.Context)
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Get recent working directories
	// (GET /recent-paths)
	GetRecentPaths(c *gin.Context, params GetRecentPathsParams)
	// List sessions
	// (GET /sessions)
	ListSessions(c *gin.Context, params ListSessionsParams)
	// Launch a new session
	// (POST /sessions)
	CreateSession(c *gin.Context)
	// Bulk archive/unarchive sessions
	// (POST /sessions/archive)
	BulkArchiveSessions(c *gin.Context)
	// Get session details
	// (GET /sessions/{id})
	GetSession(c *gin.Context, id SessionId)
	// Update session settings
	// (PATCH /sessions/{id})
	UpdateSession(c *gin.Context, id SessionId)
	// Continue or fork a session
	// (POST /sessions/{id}/continue)
	ContinueSession(c *gin.Context, id SessionId)
	// Interrupt a running session
	// (POST /sessions/{id}/interrupt)
	InterruptSession(c *gin.Context, id SessionId)
	// Delete a draft session
	// (DELETE /sessions/{id}/launch)
	DeleteDraftSession(c *gin.Context, id SessionId)
	// Launch a draft session
	// (POST /sessions/{id}/launch)
	LaunchDraftSession(c *gin.Context, id SessionId)
	// Get conversation messages
	// (GET /sessions/{id}/messages)
	GetSessionMessages(c *gin.Context, id SessionId)
	// Get file snapshots
	// (GET /sessions/{id}/snapshots)
	GetSessionSnapshots(c *gin.Context, id SessionId)
	// Get available slash commands
	// (GET /slash-commands)
	GetSlashCommands(c *gin.Context, params GetSlashCommandsParams)
	// Get user settings
	// (GET /user-settings)
	GetUserSettings(c *gin.Context)
	// Update user settings
	// (PATCH /user-settings)
	UpdateUserSettings(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListApprovals operation middleware
func (siw *ServerInterfaceWrapper) ListApprovals(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListApprovalsParams

	// ------------- Optional query parameter "sessionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "sessionId", c.Request.URL.Query(), &params.SessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sessionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListApprovals(c, params)
}

// CreateApproval operation middleware
func (siw *ServerInterfaceWrapper) CreateApproval(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateApproval(c)
}

// GetApproval operation middleware
func (siw *ServerInterfaceWrapper) GetApproval(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ApprovalId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApproval(c, id)
}

// DecideApproval operation middleware
func (siw *ServerInterfaceWrapper) DecideApproval(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ApprovalId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DecideApproval(c, id)
}

// GetConfig operation middleware
func (siw *ServerInterfaceWrapper) GetConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConfig(c)
}

// UpdateConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateConfig(c)
}

// GetDebugInfo operation middleware
func (siw *ServerInterfaceWrapper) GetDebugInfo(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDebugInfo(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GetRecentPaths operation middleware
func (siw *ServerInterfaceWrapper) GetRecentPaths(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecentPathsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecentPaths(c, params)
}

// ListSessions operation middleware
func (siw *ServerInterfaceWrapper) ListSessions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSessionsParams

	// ------------- Optional query parameter "leavesOnly" -------------

	err = runtime.BindQueryParameter("form", true, false, "leavesOnly", c.Request.URL.Query(), &params.LeavesOnly)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter leavesOnly: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListSessions(c, params)
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSession(c)
}

// BulkArchiveSessions operation middleware
func (siw *ServerInterfaceWrapper) BulkArchiveSessions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkArchiveSessions(c)
}

// GetSession operation middleware
func (siw *ServerInterfaceWrapper) GetSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSession(c, id)
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSession(c, id)
}

// ContinueSession operation middleware
func (siw *ServerInterfaceWrapper) ContinueSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ContinueSession(c, id)
}

// InterruptSession operation middleware
func (siw *ServerInterfaceWrapper) InterruptSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.InterruptSession(c, id)
}

// DeleteDraftSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteDraftSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteDraftSession(c, id)
}

// LaunchDraftSession operation middleware
func (siw *ServerInterfaceWrapper) LaunchDraftSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LaunchDraftSession(c, id)
}

// GetSessionMessages operation middleware
func (siw *ServerInterfaceWrapper) GetSessionMessages(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSessionMessages(c, id)
}

// GetSessionSnapshots operation middleware
func (siw *ServerInterfaceWrapper) GetSessionSnapshots(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id SessionId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSessionSnapshots(c, id)
}

// GetSlashCommands operation middleware
func (siw *ServerInterfaceWrapper) GetSlashCommands(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSlashCommandsParams

	// ------------- Required query parameter "session_id" -------------

	if paramValue := c.Query("session_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument session_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "session_id", c.Request.URL.Query(), &params.SessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter session_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSlashCommands(c, params)
}

// GetUserSettings operation middleware
func (siw *ServerInterfaceWrapper) GetUserSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserSettings(c)
}

// UpdateUserSettings operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserSettings(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/approvals", wrapper.ListApprovals)
	router.POST(options.BaseURL+"/approvals", wrapper.CreateApproval)
	router.GET(options.BaseURL+"/approvals/:id", wrapper.GetApproval)
	router.POST(options.BaseURL+"/approvals/:id/decide", wrapper.DecideApproval)
	router.GET(options.BaseURL+"/config", wrapper.GetConfig)
	router.PATCH(options.BaseURL+"/config", wrapper.UpdateConfig)
	router.GET(options.BaseURL+"/debug-info", wrapper.GetDebugInfo)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.GET(options.BaseURL+"/recent-paths", wrapper.GetRecentPaths)
	router.GET(options.BaseURL+"/sessions", wrapper.ListSessions)
	router.POST(options.BaseURL+"/sessions", wrapper.CreateSession)
	router.POST(options.BaseURL+"/sessions/archive", wrapper.BulkArchiveSessions)
	router.GET(options.BaseURL+"/sessions/:id", wrapper.GetSession)
	router.PATCH(options.BaseURL+"/sessions/:id", wrapper.UpdateSession)
	router.POST(options.BaseURL+"/sessions/:id/continue", wrapper.ContinueSession)
	router.POST(options.BaseURL+"/sessions/:id/interrupt", wrapper.InterruptSession)
	router.DELETE(options.BaseURL+"/sessions/:id/launch", wrapper.DeleteDraftSession)
	router.POST(options.BaseURL+"/sessions/:id/launch", wrapper.LaunchDraftSession)
	router.GET(options.BaseURL+"/sessions/:id/messages", wrapper.GetSessionMessages)
	router.GET(options.BaseURL+"/sessions/:id/snapshots", wrapper.GetSessionSnapshots)
	router.GET(options.BaseURL+"/slash-commands", wrapper.GetSlashCommands)
	router.GET(options.BaseURL+"/user-settings", wrapper.GetUserSettings)
	router.PATCH(options.BaseURL+"/user-settings", wrapper.UpdateUserSettings)
}

type BadRequestJSONResponse ErrorResponse

type InternalErrorJSONResponse ErrorResponse

type NotFoundJSONResponse ErrorResponse

type ListApprovalsRequestObject struct {
	Params ListApprovalsParams
}

type ListApprovalsResponseObject interface {
	VisitListApprovalsResponse(w http.ResponseWriter) error
}

type ListApprovals200JSONResponse ApprovalsResponse

func (response ListApprovals200JSONResponse) VisitListApprovalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListApprovals500JSONResponse struct{ InternalErrorJSONResponse }

func (response ListApprovals500JSONResponse) VisitListApprovalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateApprovalRequestObject struct {
	Body *CreateApprovalJSONRequestBody
}

type CreateApprovalResponseObject interface {
	VisitCreateApprovalResponse(w http.ResponseWriter) error
}

type CreateApproval201JSONResponse CreateApprovalResponse

func (response CreateApproval201JSONResponse) VisitCreateApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateApproval400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateApproval400JSONResponse) VisitCreateApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateApproval500JSONResponse struct{ InternalErrorJSONResponse }

func (response CreateApproval500JSONResponse) VisitCreateApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApprovalRequestObject struct {
	Id ApprovalId `json:"id"`
}

type GetApprovalResponseObject interface {
	VisitGetApprovalResponse(w http.ResponseWriter) error
}

type GetApproval200JSONResponse ApprovalResponse

func (response GetApproval200JSONResponse) VisitGetApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApproval404JSONResponse struct{ NotFoundJSONResponse }

func (response GetApproval404JSONResponse) VisitGetApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetApproval500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetApproval500JSONResponse) VisitGetApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DecideApprovalRequestObject struct {
	Id   ApprovalId `json:"id"`
	Body *DecideApprovalJSONRequestBody
}

type DecideApprovalResponseObject interface {
	VisitDecideApprovalResponse(w http.ResponseWriter) error
}

type DecideApproval200JSONResponse DecideApprovalResponse

func (response DecideApproval200JSONResponse) VisitDecideApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DecideApproval400JSONResponse ErrorResponse

func (response DecideApproval400JSONResponse) VisitDecideApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DecideApproval404JSONResponse struct{ NotFoundJSONResponse }

func (response DecideApproval404JSONResponse) VisitDecideApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DecideApproval500JSONResponse struct{ InternalErrorJSONResponse }

func (response DecideApproval500JSONResponse) VisitDecideApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConfigRequestObject struct {
}

type GetConfigResponseObject interface {
	VisitGetConfigResponse(w http.ResponseWriter) error
}

type GetConfig200JSONResponse ConfigResponse

func (response GetConfig200JSONResponse) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConfig500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetConfig500JSONResponse) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConfigRequestObject struct {
	Body *UpdateConfigJSONRequestBody
}

type UpdateConfigResponseObject interface {
	VisitUpdateConfigResponse(w http.ResponseWriter) error
}

type UpdateConfig200JSONResponse ConfigResponse

func (response UpdateConfig200JSONResponse) VisitUpdateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConfig400JSONResponse struct{ BadRequestJSONResponse }

func (response UpdateConfig400JSONResponse) VisitUpdateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConfig500JSONResponse struct{ InternalErrorJSONResponse }

func (response UpdateConfig500JSONResponse) VisitUpdateConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDebugInfoRequestObject struct {
}

type GetDebugInfoResponseObject interface {
	VisitGetDebugInfoResponse(w http.ResponseWriter) error
}

type GetDebugInfo200JSONResponse DebugInfoResponse

func (response GetDebugInfo200JSONResponse) VisitGetDebugInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecentPathsRequestObject struct {
	Params GetRecentPathsParams
}

type GetRecentPathsResponseObject interface {
	VisitGetRecentPathsResponse(w http.ResponseWriter) error
}

type GetRecentPaths200JSONResponse RecentPathsResponse

func (response GetRecentPaths200JSONResponse) VisitGetRecentPathsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecentPaths500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetRecentPaths500JSONResponse) VisitGetRecentPathsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListSessionsRequestObject struct {
	Params ListSessionsParams
}

type ListSessionsResponseObject interface {
	VisitListSessionsResponse(w http.ResponseWriter) error
}

type ListSessions200JSONResponse SessionsResponse

func (response ListSessions200JSONResponse) VisitListSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSessions500JSONResponse struct{ InternalErrorJSONResponse }

func (response ListSessions500JSONResponse) VisitListSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSessionRequestObject struct {
	Body *CreateSessionJSONRequestBody
}

type CreateSessionResponseObject interface {
	VisitCreateSessionResponse(w http.ResponseWriter) error
}

type CreateSession201JSONResponse CreateSessionResponse

func (response CreateSession201JSONResponse) VisitCreateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSession400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateSession400JSONResponse) VisitCreateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response CreateSession500JSONResponse) VisitCreateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type BulkArchiveSessionsRequestObject struct {
	Body *BulkArchiveSessionsJSONRequestBody
}

type BulkArchiveSessionsResponseObject interface {
	VisitBulkArchiveSessionsResponse(w http.ResponseWriter) error
}

type BulkArchiveSessions200JSONResponse BulkArchiveResponse

func (response BulkArchiveSessions200JSONResponse) VisitBulkArchiveSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type BulkArchiveSessions207JSONResponse BulkArchiveResponse

func (response BulkArchiveSessions207JSONResponse) VisitBulkArchiveSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(207)

	return json.NewEncoder(w).Encode(response)
}

type BulkArchiveSessions400JSONResponse struct{ BadRequestJSONResponse }

func (response BulkArchiveSessions400JSONResponse) VisitBulkArchiveSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type BulkArchiveSessions500JSONResponse struct{ InternalErrorJSONResponse }

func (response BulkArchiveSessions500JSONResponse) VisitBulkArchiveSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionRequestObject struct {
	Id SessionId `json:"id"`
}

type GetSessionResponseObject interface {
	VisitGetSessionResponse(w http.ResponseWriter) error
}

type GetSession200JSONResponse SessionResponse

func (response GetSession200JSONResponse) VisitGetSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSession404JSONResponse struct{ NotFoundJSONResponse }

func (response GetSession404JSONResponse) VisitGetSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetSession500JSONResponse) VisitGetSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionRequestObject struct {
	Id   SessionId `json:"id"`
	Body *UpdateSessionJSONRequestBody
}

type UpdateSessionResponseObject interface {
	VisitUpdateSessionResponse(w http.ResponseWriter) error
}

type UpdateSession200JSONResponse SessionResponse

func (response UpdateSession200JSONResponse) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSession404JSONResponse struct{ NotFoundJSONResponse }

func (response UpdateSession404JSONResponse) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response UpdateSession500JSONResponse) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ContinueSessionRequestObject struct {
	Id   SessionId `json:"id"`
	Body *ContinueSessionJSONRequestBody
}

type ContinueSessionResponseObject interface {
	VisitContinueSessionResponse(w http.ResponseWriter) error
}

type ContinueSession201JSONResponse ContinueSessionResponse

func (response ContinueSession201JSONResponse) VisitContinueSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ContinueSession404JSONResponse struct{ NotFoundJSONResponse }

func (response ContinueSession404JSONResponse) VisitContinueSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ContinueSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response ContinueSession500JSONResponse) VisitContinueSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type InterruptSessionRequestObject struct {
	Id SessionId `json:"id"`
}

type InterruptSessionResponseObject interface {
	VisitInterruptSessionResponse(w http.ResponseWriter) error
}

type InterruptSession200JSONResponse InterruptSessionResponse

func (response InterruptSession200JSONResponse) VisitInterruptSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type InterruptSession400JSONResponse ErrorResponse

func (response InterruptSession400JSONResponse) VisitInterruptSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type InterruptSession404JSONResponse struct{ NotFoundJSONResponse }

func (response InterruptSession404JSONResponse) VisitInterruptSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type InterruptSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response InterruptSession500JSONResponse) VisitInterruptSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDraftSessionRequestObject struct {
	Id SessionId `json:"id"`
}

type DeleteDraftSessionResponseObject interface {
	VisitDeleteDraftSessionResponse(w http.ResponseWriter) error
}

type DeleteDraftSession204Response struct {
}

func (response DeleteDraftSession204Response) VisitDeleteDraftSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDraftSession400JSONResponse ErrorResponse

func (response DeleteDraftSession400JSONResponse) VisitDeleteDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDraftSession404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteDraftSession404JSONResponse) VisitDeleteDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDraftSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response DeleteDraftSession500JSONResponse) VisitDeleteDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LaunchDraftSessionRequestObject struct {
	Id   SessionId `json:"id"`
	Body *LaunchDraftSessionJSONRequestBody
}

type LaunchDraftSessionResponseObject interface {
	VisitLaunchDraftSessionResponse(w http.ResponseWriter) error
}

type LaunchDraftSession200JSONResponse SessionResponse

func (response LaunchDraftSession200JSONResponse) VisitLaunchDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LaunchDraftSession400JSONResponse ErrorResponse

func (response LaunchDraftSession400JSONResponse) VisitLaunchDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LaunchDraftSession404JSONResponse struct{ NotFoundJSONResponse }

func (response LaunchDraftSession404JSONResponse) VisitLaunchDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type LaunchDraftSession500JSONResponse struct{ InternalErrorJSONResponse }

func (response LaunchDraftSession500JSONResponse) VisitLaunchDraftSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionMessagesRequestObject struct {
	Id SessionId `json:"id"`
}

type GetSessionMessagesResponseObject interface {
	VisitGetSessionMessagesResponse(w http.ResponseWriter) error
}

type GetSessionMessages200JSONResponse ConversationResponse

func (response GetSessionMessages200JSONResponse) VisitGetSessionMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionMessages404JSONResponse struct{ NotFoundJSONResponse }

func (response GetSessionMessages404JSONResponse) VisitGetSessionMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionMessages500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetSessionMessages500JSONResponse) VisitGetSessionMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionSnapshotsRequestObject struct {
	Id SessionId `json:"id"`
}

type GetSessionSnapshotsResponseObject interface {
	VisitGetSessionSnapshotsResponse(w http.ResponseWriter) error
}

type GetSessionSnapshots200JSONResponse SnapshotsResponse

func (response GetSessionSnapshots200JSONResponse) VisitGetSessionSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionSnapshots404JSONResponse struct{ NotFoundJSONResponse }

func (response GetSessionSnapshots404JSONResponse) VisitGetSessionSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionSnapshots500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetSessionSnapshots500JSONResponse) VisitGetSessionSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSlashCommandsRequestObject struct {
	Params GetSlashCommandsParams
}

type GetSlashCommandsResponseObject interface {
	VisitGetSlashCommandsResponse(w http.ResponseWriter) error
}

type GetSlashCommands200JSONResponse SlashCommandsResponse

func (response GetSlashCommands200JSONResponse) VisitGetSlashCommandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSlashCommands400JSONResponse struct{ BadRequestJSONResponse }

func (response GetSlashCommands400JSONResponse) VisitGetSlashCommandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSlashCommands500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetSlashCommands500JSONResponse) VisitGetSlashCommandsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserSettingsRequestObject struct {
}

type GetUserSettingsResponseObject interface {
	VisitGetUserSettingsResponse(w http.ResponseWriter) error
}

type GetUserSettings200JSONResponse UserSettingsResponse

func (response GetUserSettings200JSONResponse) VisitGetUserSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserSettings500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetUserSettings500JSONResponse) VisitGetUserSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserSettingsRequestObject struct {
	Body *UpdateUserSettingsJSONRequestBody
}

type UpdateUserSettingsResponseObject interface {
	VisitUpdateUserSettingsResponse(w http.ResponseWriter) error
}

type UpdateUserSettings200JSONResponse UserSettingsResponse

func (response UpdateUserSettings200JSONResponse) VisitUpdateUserSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserSettings400JSONResponse struct{ BadRequestJSONResponse }

func (response UpdateUserSettings400JSONResponse) VisitUpdateUserSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserSettings500JSONResponse struct{ InternalErrorJSONResponse }

func (response UpdateUserSettings500JSONResponse) VisitUpdateUserSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List approval requests
	// (GET /approvals)
	ListApprovals(ctx context.Context, request ListApprovalsRequestObject) (ListApprovalsResponseObject, error)
	// Create approval request
	// (POST /approvals)
	CreateApproval(ctx context.Context, request CreateApprovalRequestObject) (CreateApprovalResponseObject, error)
	// Get approval details
	// (GET /approvals/{id})
	GetApproval(ctx context.Context, request GetApprovalRequestObject) (GetApprovalResponseObject, error)
	// Decide on approval request
	// (POST /approvals/{id}/decide)
	DecideApproval(ctx context.Context, request DecideApprovalRequestObject) (DecideApprovalResponseObject, error)
	// Get daemon configuration
	// (GET /config)
	GetConfig(ctx context.Context, request GetConfigRequestObject) (GetConfigResponseObject, error)
	// Update daemon configuration
	// (PATCH /config)
	UpdateConfig(ctx context.Context, request UpdateConfigRequestObject) (UpdateConfigResponseObject, error)
	// Get debug information
	// (GET /debug-info)
	GetDebugInfo(ctx context.Context, request GetDebugInfoRequestObject) (GetDebugInfoResponseObject, error)
	// Health check
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Get recent working directories
	// (GET /recent-paths)
	GetRecentPaths(ctx context.Context, request GetRecentPathsRequestObject) (GetRecentPathsResponseObject, error)
	// List sessions
	// (GET /sessions)
	ListSessions(ctx context.Context, request ListSessionsRequestObject) (ListSessionsResponseObject, error)
	// Launch a new session
	// (POST /sessions)
	CreateSession(ctx context.Context, request CreateSessionRequestObject) (CreateSessionResponseObject, error)
	// Bulk archive/unarchive sessions
	// (POST /sessions/archive)
	BulkArchiveSessions(ctx context.Context, request BulkArchiveSessionsRequestObject) (BulkArchiveSessionsResponseObject, error)
	// Get session details
	// (GET /sessions/{id})
	GetSession(ctx context.Context, request GetSessionRequestObject) (GetSessionResponseObject, error)
	// Update session settings
	// (PATCH /sessions/{id})
	UpdateSession(ctx context.Context, request UpdateSessionRequestObject) (UpdateSessionResponseObject, error)
	// Continue or fork a session
	// (POST /sessions/{id}/continue)
	ContinueSession(ctx context.Context, request ContinueSessionRequestObject) (ContinueSessionResponseObject, error)
	// Interrupt a running session
	// (POST /sessions/{id}/interrupt)
	InterruptSession(ctx context.Context, request InterruptSessionRequestObject) (InterruptSessionResponseObject, error)
	// Delete a draft session
	// (DELETE /sessions/{id}/launch)
	DeleteDraftSession(ctx context.Context, request DeleteDraftSessionRequestObject) (DeleteDraftSessionResponseObject, error)
	// Launch a draft session
	// (POST /sessions/{id}/launch)
	LaunchDraftSession(ctx context.Context, request LaunchDraftSessionRequestObject) (LaunchDraftSessionResponseObject, error)
	// Get conversation messages
	// (GET /sessions/{id}/messages)
	GetSessionMessages(ctx context.Context, request GetSessionMessagesRequestObject) (GetSessionMessagesResponseObject, error)
	// Get file snapshots
	// (GET /sessions/{id}/snapshots)
	GetSessionSnapshots(ctx context.Context, request GetSessionSnapshotsRequestObject) (GetSessionSnapshotsResponseObject, error)
	// Get available slash commands
	// (GET /slash-commands)
	GetSlashCommands(ctx context.Context, request GetSlashCommandsRequestObject) (GetSlashCommandsResponseObject, error)
	// Get user settings
	// (GET /user-settings)
	GetUserSettings(ctx context.Context, request GetUserSettingsRequestObject) (GetUserSettingsResponseObject, error)
	// Update user settings
	// (PATCH /user-settings)
	UpdateUserSettings(ctx context.Context, request UpdateUserSettingsRequestObject) (UpdateUserSettingsResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListApprovals operation middleware
func (sh *strictHandler) ListApprovals(ctx *gin.Context, params ListApprovalsParams) {
	var request ListApprovalsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListApprovals(ctx, request.(ListApprovalsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListApprovals")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListApprovalsResponseObject); ok {
		if err := validResponse.VisitListApprovalsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateApproval operation middleware
func (sh *strictHandler) CreateApproval(ctx *gin.Context) {
	var request CreateApprovalRequestObject

	var body CreateApprovalJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateApproval(ctx, request.(CreateApprovalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateApproval")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateApprovalResponseObject); ok {
		if err := validResponse.VisitCreateApprovalResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApproval operation middleware
func (sh *strictHandler) GetApproval(ctx *gin.Context, id ApprovalId) {
	var request GetApprovalRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApproval(ctx, request.(GetApprovalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApproval")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApprovalResponseObject); ok {
		if err := validResponse.VisitGetApprovalResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DecideApproval operation middleware
func (sh *strictHandler) DecideApproval(ctx *gin.Context, id ApprovalId) {
	var request DecideApprovalRequestObject

	request.Id = id

	var body DecideApprovalJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DecideApproval(ctx, request.(DecideApprovalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DecideApproval")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DecideApprovalResponseObject); ok {
		if err := validResponse.VisitDecideApprovalResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConfig operation middleware
func (sh *strictHandler) GetConfig(ctx *gin.Context) {
	var request GetConfigRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConfig(ctx, request.(GetConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConfigResponseObject); ok {
		if err := validResponse.VisitGetConfigResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateConfig operation middleware
func (sh *strictHandler) UpdateConfig(ctx *gin.Context) {
	var request UpdateConfigRequestObject

	var body UpdateConfigJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateConfig(ctx, request.(UpdateConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateConfigResponseObject); ok {
		if err := validResponse.VisitUpdateConfigResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDebugInfo operation middleware
func (sh *strictHandler) GetDebugInfo(ctx *gin.Context) {
	var request GetDebugInfoRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDebugInfo(ctx, request.(GetDebugInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDebugInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetDebugInfoResponseObject); ok {
		if err := validResponse.VisitGetDebugInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(ctx *gin.Context) {
	var request GetHealthRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecentPaths operation middleware
func (sh *strictHandler) GetRecentPaths(ctx *gin.Context, params GetRecentPathsParams) {
	var request GetRecentPathsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecentPaths(ctx, request.(GetRecentPathsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecentPaths")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRecentPathsResponseObject); ok {
		if err := validResponse.VisitGetRecentPathsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListSessions operation middleware
func (sh *strictHandler) ListSessions(ctx *gin.Context, params ListSessionsParams) {
	var request ListSessionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListSessions(ctx, request.(ListSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListSessionsResponseObject); ok {
		if err := validResponse.VisitListSessionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSession operation middleware
func (sh *strictHandler) CreateSession(ctx *gin.Context) {
	var request CreateSessionRequestObject

	var body CreateSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSession(ctx, request.(CreateSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSessionResponseObject); ok {
		if err := validResponse.VisitCreateSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// BulkArchiveSessions operation middleware
func (sh *strictHandler) BulkArchiveSessions(ctx *gin.Context) {
	var request BulkArchiveSessionsRequestObject

	var body BulkArchiveSessionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.BulkArchiveSessions(ctx, request.(BulkArchiveSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BulkArchiveSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(BulkArchiveSessionsResponseObject); ok {
		if err := validResponse.VisitBulkArchiveSessionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSession operation middleware
func (sh *strictHandler) GetSession(ctx *gin.Context, id SessionId) {
	var request GetSessionRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSession(ctx, request.(GetSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSessionResponseObject); ok {
		if err := validResponse.VisitGetSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSession operation middleware
func (sh *strictHandler) UpdateSession(ctx *gin.Context, id SessionId) {
	var request UpdateSessionRequestObject

	request.Id = id

	var body UpdateSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSession(ctx, request.(UpdateSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSessionResponseObject); ok {
		if err := validResponse.VisitUpdateSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ContinueSession operation middleware
func (sh *strictHandler) ContinueSession(ctx *gin.Context, id SessionId) {
	var request ContinueSessionRequestObject

	request.Id = id

	var body ContinueSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ContinueSession(ctx, request.(ContinueSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ContinueSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ContinueSessionResponseObject); ok {
		if err := validResponse.VisitContinueSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// InterruptSession operation middleware
func (sh *strictHandler) InterruptSession(ctx *gin.Context, id SessionId) {
	var request InterruptSessionRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InterruptSession(ctx, request.(InterruptSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InterruptSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(InterruptSessionResponseObject); ok {
		if err := validResponse.VisitInterruptSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDraftSession operation middleware
func (sh *strictHandler) DeleteDraftSession(ctx *gin.Context, id SessionId) {
	var request DeleteDraftSessionRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDraftSession(ctx, request.(DeleteDraftSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDraftSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteDraftSessionResponseObject); ok {
		if err := validResponse.VisitDeleteDraftSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// LaunchDraftSession operation middleware
func (sh *strictHandler) LaunchDraftSession(ctx *gin.Context, id SessionId) {
	var request LaunchDraftSessionRequestObject

	request.Id = id

	var body LaunchDraftSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LaunchDraftSession(ctx, request.(LaunchDraftSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LaunchDraftSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LaunchDraftSessionResponseObject); ok {
		if err := validResponse.VisitLaunchDraftSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSessionMessages operation middleware
func (sh *strictHandler) GetSessionMessages(ctx *gin.Context, id SessionId) {
	var request GetSessionMessagesRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSessionMessages(ctx, request.(GetSessionMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSessionMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSessionMessagesResponseObject); ok {
		if err := validResponse.VisitGetSessionMessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSessionSnapshots operation middleware
func (sh *strictHandler) GetSessionSnapshots(ctx *gin.Context, id SessionId) {
	var request GetSessionSnapshotsRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSessionSnapshots(ctx, request.(GetSessionSnapshotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSessionSnapshots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSessionSnapshotsResponseObject); ok {
		if err := validResponse.VisitGetSessionSnapshotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSlashCommands operation middleware
func (sh *strictHandler) GetSlashCommands(ctx *gin.Context, params GetSlashCommandsParams) {
	var request GetSlashCommandsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSlashCommands(ctx, request.(GetSlashCommandsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSlashCommands")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSlashCommandsResponseObject); ok {
		if err := validResponse.VisitGetSlashCommandsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserSettings operation middleware
func (sh *strictHandler) GetUserSettings(ctx *gin.Context) {
	var request GetUserSettingsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserSettings(ctx, request.(GetUserSettingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserSettings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserSettingsResponseObject); ok {
		if err := validResponse.VisitGetUserSettingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUserSettings operation middleware
func (sh *strictHandler) UpdateUserSettings(ctx *gin.Context) {
	var request UpdateUserSettingsRequestObject

	var body UpdateUserSettingsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserSettings(ctx, request.(UpdateUserSettingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUserSettings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserSettingsResponseObject); ok {
		if err := validResponse.VisitUpdateUserSettingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/ycAAP//I2kS3R6UAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
