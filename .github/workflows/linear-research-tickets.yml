name: "Linear: Research Task"
on:
  push:
    branches:
      - kyle/eng-2175-auto-create-worktree-and-checkout-for-linear
      - kyle/eng-2236-allow-setting-max_thinking_tokens-env-variable-through-ui
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      num_tickets:
        description: "Maximum number of tickets to try and fetch"
        required: false
        type: string
        default: "10"

jobs:
  fetch-tickets:
    runs-on: ubuntu-latest
    env:
      RESEARCH_WIP_LIMIT: 5  # Configurable WIP limit
    outputs:
      ticket_ids: ${{ steps.fetch-tickets.outputs.ticket_ids }}
    steps:
      - name: "Checkout repository"
        id: checkout-repository
        uses: actions/checkout@v4

      - name: "Set up linear tool"
        id: setup-linear-tool
        run: |
          cd hack/linear && npm install && npm install -g .

      - name: "Check research in review WIP capacity"
        id: check-wip
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        run: |
          # Count tickets currently in "research in review" status
          review_json=$(linear list-issues --max-issues 100 --status 'research in review' --assignee 'LinearLayer (Claude)' --ids-only --output-format json)

          # Check if linear command succeeded
          if [ $? -ne 0 ]; then
            echo "Error: Failed to query tickets in review. Defaulting to no capacity."
            echo "review_count=999" >> "$GITHUB_OUTPUT"
            echo "available_slots=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Count tickets using jq
          review_count=$(echo "$review_json" | jq 'length')

          # Validate jq output is a number
          if ! [[ "$review_count" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid count result. Defaulting to no capacity."
            echo "review_count=999" >> "$GITHUB_OUTPUT"
            echo "available_slots=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "review_count=$review_count" >> "$GITHUB_OUTPUT"

          # Calculate available slots
          available_slots=$((${{ env.RESEARCH_WIP_LIMIT }} - review_count))

          # Ensure available_slots is not negative
          if [ "$available_slots" -lt 0 ]; then
            available_slots=0
          fi

          echo "available_slots=$available_slots" >> "$GITHUB_OUTPUT"

          # Enhanced logging for monitoring
          echo "::notice title=WIP Status::$review_count/${{ env.RESEARCH_WIP_LIMIT }} tickets in review, $available_slots slots available"

          # Log warning when approaching limit
          if [ "$available_slots" -le 1 ] && [ "$available_slots" -gt 0 ]; then
            echo "::warning title=Approaching WIP Limit::Only $available_slots slot(s) remaining before WIP limit"
          elif [ "$available_slots" -eq 0 ]; then
            echo "::warning title=WIP Limit Reached::No capacity for new tickets (WIP limit: ${{ env.RESEARCH_WIP_LIMIT }})"
          fi

      - name: "Get researchable tickets"
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        id: fetch-tickets
        run: |
          available_slots=${{ steps.check-wip.outputs.available_slots }}

          if [ "$available_slots" -eq 0 ]; then
            echo "WIP limit reached - no capacity for new tickets"
            echo "ticket_ids=[]" >> "$GITHUB_OUTPUT"
          else
            # Fetch tickets up to available capacity
            max_tickets=${{ inputs.num_tickets || 10 }}

            # Use the smaller of available_slots or max_tickets
            if [ "$available_slots" -lt "$max_tickets" ]; then
              fetch_limit=$available_slots
            else
              fetch_limit=$max_tickets
            fi

            echo "Fetching up to $fetch_limit tickets (capacity: $available_slots, requested: $max_tickets)"
            echo "ticket_ids=$(linear list-issues --max-issues $fetch_limit --status 'research needed' --assignee 'LinearLayer (Claude)' --ids-only --output-format json)" >> "$GITHUB_OUTPUT"
          fi

      - name: "Output Ids"
        run: echo ${{steps.fetch-tickets.outputs.ticket_ids}}

  research-tickets:
    name: Research Ticket ${{matrix.ticket_id}}
    needs:
      - fetch-tickets
    runs-on: ubuntu-latest
    if: ${{ needs.fetch-tickets.outputs.ticket_ids != '[]' && needs.fetch-tickets.outputs.ticket_ids != ''}}
    strategy:
      fail-fast: false # we don't want all jobs to stop just because one fails
      matrix:
        ticket_id: ${{ fromJSON(needs.fetch-tickets.outputs.ticket_ids)}}
    env:
      TICKET_FILE_PATH: thoughts/shared/tickets/${{matrix.ticket_id}}.md

    steps:
      - name: Checkout humanlayer repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: humanlayer

      - name: Configure git user
        run: |
          git config --global user.email "noreply@anthropic.com"
          git config --global user.name "Claude"

      - name: Checkout thoughts repository
        uses: actions/checkout@v4
        with:
          repository: humanlayer/thoughts
          ref: main
          ssh-key: ${{ secrets.THOUGHTS_WRITE_DEPLOY_KEY }}
          path: thoughts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Claude Code
        run: npm install -g @anthropic-ai/claude-code

      - name: Install humanlayer CLI globally
        run: cd humanlayer && npm install -g humanlayer

      - name: Setup thoughts tool config
        run: |
          echo '{
            "thoughts": {
              "thoughtsRepo": "${{ github.workspace }}/thoughts",
              "reposDir": "repos",
              "globalDir": "global",
              "user": "claude",
              "repoMappings": {}
            }
          }' >> humanlayer/.humanlayer.json

      - name: Initialize thoughts tool
        run: cd humanlayer && humanlayer thoughts init --config-file .humanlayer.json --directory humanlayer

      - name: Setup linear tool
        run: |
          cd humanlayer/hack/linear && npm install && npm install -g .

      - name: Fetch Ticket with Linear CLI
        id: fetch-ticket
        run: linear get-issue ${{ matrix.ticket_id }} >> humanlayer/${{ env.TICKET_FILE_PATH }}
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}

      - name: Fetch images from ticket with Linear CLI
        id: fetch-ticket-images
        run: cd humanlayer && linear fetch-images ${{ matrix.ticket_id}}
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}

      - name: Update linear ticket status to Research in Progress
        id: update-ticket-status-progress
        run: cd humanlayer && linear update-status ${{ matrix.ticket_id }} "research in progress"
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}

      - name: Run research with Claude
        id: run-claude-research
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: >
          cd humanlayer && claude --dangerously-skip-permissions --model opus -p '/research_codebase ${{ env.TICKET_FILE_PATH }} 
            Start by reading the ticket and all of the comments.
            Pay extra code attention to the comments - if you (LinearLayer/claude) are mentioned in a comment you should treat that comment as an instruction.
            Also check /thoughts/shared/images/${{matrix.ticket_id}} for any relevant images and read any you find.
            Then proceed to research the codebase based on the instructions.

            **DO NOT ASK THE USER FOR DIRECTIONS OR CLARIFICATION. Simply proceed to the research based on the information you have been provided with, and then write your research document. **

            If there is already a research document for this ticket and there are comments on the ticket, use the comments as instructions for updating the research document.
            When referencing the research document that you created in thoughts/ to the user once you finish, always provide GitHub markdown-style links:
            - thoughts/shared/research/... â†’ [LINK TITLE HERE](https://github.com/humanlayer/thoughts/blob/main/repos/humanlayer/shared/research/...)
              
            ' 2>&1 | tee CLAUDE_ANSWER.md

      - name: Sync research to thoughts
        id: sync-research-document
        run: |
          cd thoughts

          # Stage all changes first
          git add -A

          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          # Commit our changes BEFORE pulling
          git commit -m "Sync thoughts from CI for ${{ matrix.ticket_id}}"

          # Pull with rebase to get any remote changes and rebase our commit on top
          git pull --rebase

          # Retry push up to 5 times
          for i in {1..5}; do
            git push && break || {
              if [ $i -eq 5 ]; then
                echo "Failed to push after 5 attempts"
                exit 1
              fi
              echo "Push failed, attempt $i/5. Pulling and retrying..."
              git pull --rebase
              sleep 2
            }
          done

      # if the task fails, update the status to "research needed"
      - name: In event of failure reset status
        if: ${{ failure() }}
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        run: |
          cd humanlayer && linear update-status ${{ matrix.ticket_id }} "research needed"

      # if the task is cancelled, update the status to "research needed"
      - name: In event of cancellation reset status
        if: ${{ cancelled() }}
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        run: |
          cd humanlayer && linear update-status ${{ matrix.ticket_id }} "research needed"

      - name: Add comment to linear ticket
        id: update-ticket-with-notes
        run: cd humanlayer && linear add-comment -i ${{matrix.ticket_id}} "$(cat CLAUDE_ANSWER.md)"
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}

      - name: Update linear ticket status
        id: update-ticket-status-review
        run: cd humanlayer && linear update-status ${{ matrix.ticket_id }} "research in review"
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
